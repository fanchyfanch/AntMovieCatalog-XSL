@charset "utf-8";
/*------------------------------------------------------------------------
	STEP LIST component
__________________________________________________________________________

	DESCRIPTION

<div class="breadcrumb-container">
	<ol>
		<li>Register</li>
		<li>Login</li>
		<li class="active">Shop</li>
		<li>Pay</li>
		<li>Receive</li>
	</ol>
</div>

------------------------------------------------------------------------*/
.breadcrumb-container{
//  text-align:center;

  ol{
	/*centering*/
	display: inline-block;
	box-shadow:2px -2px 2px 0 rgba(0, 0, 0, 0.35);
	overflow: hidden;
	/*Lets add the numbers for each link using CSS counters. flag is the name of the counter. to be defined using counter-reset in the parent element of the links*/
	counter-reset: flag;

	li{
	  text-decoration: none;
	  outline: none;
	  display: block;
	  float: left;
	  font-size: 12px;
	  line-height: 36px;
	  color:#ffffff;
	  /*need more margin on the left of links to accomodate the numbers*/
	  padding: 0 17px 0 54px;
	  background: #bdbdbd;
	  position: relative;

	  &.active{
		font-weight:bold;
		color:#ffffff;
		background: #014a6b;

		&:before{
		  background:#ffffff;
		  color:#014a6b;
		}

		&:after{
		  background: #014a6b;
		}

		& ~ li,
		& ~ li:after{
		  color:#333333;
		  background: #f0f0f0;
		}
	  }

	  /*we will use the :before element to show numbers*/
	  &:before{
		content: counter(flag);
		counter-increment: flag;
		/*some styles now*/
		border-radius: 100%;
		width: 20px;
		height: 20px;
		line-height: 20px;
		margin: 8px 0;
		position: absolute;
		top: 0;
		left: 30px;
		background:#014a6b;
		color:#ffffff;
		font-weight: bold;
		text-align:center;
	  }

	  /*adding the arrows for the breadcrumbs using rotated pseudo elements*/
	  &:after{
		content: '';
		position: absolute;
		top: 0;
		right: -18px; /*half of square's length*/
		/*same dimension as the line-height of .breadcrumb a */
		width: 36px;
		height: 36px;
		/*as you see the rotated square takes a larger height. which makes it tough to position it properly. So we are going to scale it down so that the diagonals become equal to the line-height of the link. We scale it to 70.7% because if square's:
	  length = 1; diagonal = (1^2 + 1^2)^0.5 = 1.414 (pythagoras theorem)
	  if diagonal required = 1; length = 1/1.414 = 0.707*/
		transform: scale(0.707) rotate(45deg);
		/*we need to prevent the arrows from getting buried under the next link*/
		z-index: 1;
		/*background same as links but the gradient will be rotated to compensate with the transform applied*/
		background: #bdbdbd;
		/*stylish arrow design using box shadow*/
		box-shadow:
		  2px -2px 0 2px rgba(0, 0, 0, 0.4),
		  3px -3px 0 2px rgba(255, 255, 255, 0.1);
	  }

	  /*since the first link does not have a triangle before it we can reduce the left padding to make it look consistent with other links*/
	  &:first-child{
		padding-left:38px;

		&:before{
		  left: 14px;
		}
	  }

	  /*we dont need an arrow after the last link*/
	  &:last-child:after{
		content: none;
	  }
	}
  }
}